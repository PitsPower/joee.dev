import{B as F,r as S,C as G,w as V,D as J,E as Q,G as Z,H as X,k as Y,I as W,J as K,K as j,L as ee,M as L,N as te,O as M,P as O,Q as ie,b as v,d as A,f as re,R as oe,o as w,c as _,x as H,a as x,A as z,e as ne,S as R,_ as se,F as P,m as N,q as ae}from"./CYDEHKhf.js";function le(e,t={}){const r=t.head||F();if(r)return r.ssr?r.push(e,t):ce(r,e,t)}function ce(e,t,r={}){const i=S(!1),o=S({});G(()=>{o.value=i.value?{}:X(t)});const n=e.push(o.value,r);return V(o,l=>{n.patch(l)}),Y()&&(J(()=>{n.dispose()}),Q(()=>{i.value=!0}),Z(()=>{i.value=!1})),n}async function de(e,t){return await ue(t).catch(i=>(console.error("Failed to get image meta for "+t,i+""),{width:0,height:0,ratio:0}))}async function ue(e){if(typeof Image>"u")throw new TypeError("Image not supported");return new Promise((t,r)=>{const i=new Image;i.onload=()=>{const o={width:i.width,height:i.height,ratio:i.width/i.height};t(o)},i.onerror=o=>r(o),i.src=e})}function T(e){return t=>t?e[t]||t:e.missingValue}function fe({formatter:e,keyMap:t,joinWith:r="/",valueMap:i}={}){e||(e=(n,s)=>`${n}=${s}`),t&&typeof t!="function"&&(t=T(t));const o=i||{};return Object.keys(o).forEach(n=>{typeof o[n]!="function"&&(o[n]=T(o[n]))}),(n={})=>Object.entries(n).filter(([l,c])=>typeof c<"u").map(([l,c])=>{const d=o[l];return typeof d=="function"&&(c=d(n[l])),l=typeof t=="function"?t(l):l,e(l,c)}).join(r)}function m(e=""){if(typeof e=="number")return e;if(typeof e=="string"&&e.replace("px","").match(/^\d+$/g))return Number.parseInt(e,10)}function me(e=""){if(e===void 0||!e.length)return[];const t=new Set;for(const r of e.split(" ")){const i=Number.parseInt(r.replace("x",""));i&&t.add(i)}return Array.from(t)}function ge(e){if(e.length===0)throw new Error("`densities` must not be empty, configure to `1` to render regular size only (DPR 1.0)")}function he(e){const t={};if(typeof e=="string")for(const r of e.split(/[\s,]+/).filter(i=>i)){const i=r.split(":");i.length!==2?t["1px"]=i[0].trim():t[i[0].trim()]=i[1].trim()}else Object.assign(t,e);return t}function pe(e){const t={options:e},r=(o,n={})=>C(t,o,n),i=(o,n={},s={})=>r(o,{...s,modifiers:L(n,s.modifiers||{})}).url;for(const o in e.presets)i[o]=(n,s,l)=>i(n,s,{...e.presets[o],...l});return i.options=e,i.getImage=r,i.getMeta=(o,n)=>ve(t,o,n),i.getSizes=(o,n)=>_e(t,o,n),t.$img=i,i}async function ve(e,t,r){const i=C(e,t,{...r});return typeof i.getMeta=="function"?await i.getMeta():await de(e,i.url)}function C(e,t,r){var d,g;if(t&&typeof t!="string")throw new TypeError(`input must be a string (received ${typeof t}: ${JSON.stringify(t)})`);if(!t||t.startsWith("data:"))return{url:t};const{provider:i,defaults:o}=ye(e,r.provider||e.options.provider),n=we(e,r.preset);if(t=W(t)?t:K(t),!i.supportsAlias)for(const h in e.options.alias)t.startsWith(h)&&(t=j(e.options.alias[h],t.substr(h.length)));if(i.validateDomains&&W(t)){const h=ee(t).host;if(!e.options.domains.find(b=>b===h))return{url:t}}const s=L(r,n,o);s.modifiers={...s.modifiers};const l=s.modifiers.format;(d=s.modifiers)!=null&&d.width&&(s.modifiers.width=m(s.modifiers.width)),(g=s.modifiers)!=null&&g.height&&(s.modifiers.height=m(s.modifiers.height));const c=i.getImage(t,s,e);return c.format=c.format||l||"",c}function ye(e,t){const r=e.options.providers[t];if(!r)throw new Error("Unknown provider: "+t);return r}function we(e,t){if(!t)return{};if(!e.options.presets[t])throw new Error("Unknown preset: "+t);return e.options.presets[t]}function _e(e,t,r){var f,$,I,U,k;const i=m((f=r.modifiers)==null?void 0:f.width),o=m(($=r.modifiers)==null?void 0:$.height),n=he(r.sizes),s=(I=r.densities)!=null&&I.trim()?me(r.densities.trim()):e.options.densities;ge(s);const l=i&&o?o/i:0,c=[],d=[];if(Object.keys(n).length>=1){for(const u in n){const p=B(u,String(n[u]),o,l,e);if(p!==void 0){c.push({size:p.size,screenMaxWidth:p.screenMaxWidth,media:`(max-width: ${p.screenMaxWidth}px)`});for(const y of s)d.push({width:p._cWidth*y,src:E(e,t,r,p,y)})}}be(c)}else for(const u of s){const p=Object.keys(n)[0];let y=B(p,String(n[p]),o,l,e);y===void 0&&(y={size:"",screenMaxWidth:0,_cWidth:(U=r.modifiers)==null?void 0:U.width,_cHeight:(k=r.modifiers)==null?void 0:k.height}),d.push({width:u,src:E(e,t,r,y,u)})}Se(d);const g=d[d.length-1],h=c.length?c.map(u=>`${u.media?u.media+" ":""}${u.size}`).join(", "):void 0,b=h?"w":"x",a=d.map(u=>`${u.src} ${u.width}${b}`).join(", ");return{sizes:h,srcset:a,src:g==null?void 0:g.src}}function B(e,t,r,i,o){const n=o.options.screens&&o.options.screens[e]||Number.parseInt(e),s=t.endsWith("vw");if(!s&&/^\d+$/.test(t)&&(t=t+"px"),!s&&!t.endsWith("px"))return;let l=Number.parseInt(t);if(!n||!l)return;s&&(l=Math.round(l/100*n));const c=i?Math.round(l*i):r;return{size:t,screenMaxWidth:n,_cWidth:l,_cHeight:c}}function E(e,t,r,i,o){return e.$img(t,{...r.modifiers,width:i._cWidth?i._cWidth*o:void 0,height:i._cHeight?i._cHeight*o:void 0},r)}function be(e){var r;e.sort((i,o)=>i.screenMaxWidth-o.screenMaxWidth);let t=null;for(let i=e.length-1;i>=0;i--){const o=e[i];o.media===t&&e.splice(i,1),t=o.media}for(let i=0;i<e.length;i++)e[i].media=((r=e[i+1])==null?void 0:r.media)||""}function Se(e){e.sort((r,i)=>r.width-i.width);let t=null;for(let r=e.length-1;r>=0;r--){const i=e[r];i.width===t&&e.splice(r,1),t=i.width}}const xe=fe({keyMap:{format:"f",fit:"fit",width:"w",height:"h",resize:"s",quality:"q",background:"b"},joinWith:"&",formatter:(e,t)=>M(e)+"_"+M(t)}),je=(e,{modifiers:t={},baseURL:r}={},i)=>{t.width&&t.height&&(t.resize=`${t.width}x${t.height}`,delete t.width,delete t.height);const o=xe(t)||"_";return r||(r=j(i.options.nuxt.baseURL,"/_ipx")),{url:j(r,o,te(e))}},ze=!0,Ae=!0,$e=Object.freeze(Object.defineProperty({__proto__:null,getImage:je,supportsAlias:Ae,validateDomains:ze},Symbol.toStringTag,{value:"Module"})),q={screens:{xs:320,sm:640,md:768,lg:1024,xl:1280,xxl:1536,"2xl":1536},presets:{},provider:"ipxStatic",domains:[],alias:{},densities:[1,2],format:["webp"]};q.providers={ipxStatic:{provider:$e,defaults:{}}};const D=()=>{const e=ie(),t=O();return t.$img||t._img||(t._img=pe({...q,nuxt:{baseURL:e.app.baseURL}}))};function Ie(e){var t;(t=performance==null?void 0:performance.mark)==null||t.call(performance,"mark_feature_usage",{detail:{feature:e}})}const Ue={src:{type:String,default:void 0},format:{type:String,default:void 0},quality:{type:[Number,String],default:void 0},background:{type:String,default:void 0},fit:{type:String,default:void 0},modifiers:{type:Object,default:void 0},preset:{type:String,default:void 0},provider:{type:String,default:void 0},sizes:{type:[Object,String],default:void 0},densities:{type:String,default:void 0},preload:{type:[Boolean,Object],default:void 0},width:{type:[String,Number],default:void 0},height:{type:[String,Number],default:void 0},alt:{type:String,default:void 0},referrerpolicy:{type:String,default:void 0},usemap:{type:String,default:void 0},longdesc:{type:String,default:void 0},ismap:{type:Boolean,default:void 0},loading:{type:String,default:void 0,validator:e=>["lazy","eager"].includes(e)},crossorigin:{type:[Boolean,String],default:void 0,validator:e=>["anonymous","use-credentials","",!0,!1].includes(e)},decoding:{type:String,default:void 0,validator:e=>["async","auto","sync"].includes(e)},nonce:{type:[String],default:void 0}},ke=e=>{const t=v(()=>({provider:e.provider,preset:e.preset})),r=v(()=>({width:m(e.width),height:m(e.height),alt:e.alt,referrerpolicy:e.referrerpolicy,usemap:e.usemap,longdesc:e.longdesc,ismap:e.ismap,crossorigin:e.crossorigin===!0?"anonymous":e.crossorigin||void 0,loading:e.loading,decoding:e.decoding,nonce:e.nonce})),i=D(),o=v(()=>({...e.modifiers,width:m(e.width),height:m(e.height),format:e.format,quality:e.quality||i.options.quality,background:e.background,fit:e.fit}));return{options:t,attrs:r,modifiers:o}},We={...Ue,placeholder:{type:[Boolean,String,Number,Array],default:void 0},placeholderClass:{type:String,default:void 0}},Me=A({name:"NuxtImg",props:We,emits:["load","error"],setup:(e,t)=>{const r=D(),i=ke(e),o=S(!1),n=S(),s=v(()=>r.getSizes(e.src,{...i.options.value,sizes:e.sizes,densities:e.densities,modifiers:{...i.modifiers.value,width:m(e.width),height:m(e.height)}})),l=v(()=>{const a={...i.attrs.value,"data-nuxt-img":""};return(!e.placeholder||o.value)&&(a.sizes=s.value.sizes,a.srcset=s.value.srcset),a}),c=v(()=>{let a=e.placeholder;if(a===""&&(a=!0),!a||o.value)return!1;if(typeof a=="string")return a;const f=Array.isArray(a)?a:typeof a=="number"?[a,a]:[10,10];return r(e.src,{...i.modifiers.value,width:f[0],height:f[1],quality:f[2]||50,blur:f[3]||3},i.options.value)}),d=v(()=>e.sizes?s.value.src:r(e.src,i.modifiers.value,i.options.value)),g=v(()=>c.value?c.value:d.value);if(e.preload){const a=Object.values(s.value).every(f=>f);le({link:[{rel:"preload",as:"image",nonce:e.nonce,...a?{href:s.value.src,imagesizes:s.value.sizes,imagesrcset:s.value.srcset}:{href:g.value},...typeof e.preload!="boolean"&&e.preload.fetchPriority?{fetchpriority:e.preload.fetchPriority}:{}}]})}const b=O().isHydrating;return re(()=>{if(c.value){const a=new Image;a.src=d.value,e.sizes&&(a.sizes=s.value.sizes||"",a.srcset=s.value.srcset),a.onload=f=>{o.value=!0,t.emit("load",f)},Ie("nuxt-image");return}n.value&&(n.value.complete&&b&&(n.value.getAttribute("data-error")?t.emit("error",new Event("error")):t.emit("load",new Event("load"))),n.value.onload=a=>{t.emit("load",a)},n.value.onerror=a=>{t.emit("error",a)})}),()=>oe("img",{ref:n,...l.value,...t.attrs,class:e.placeholder&&!o.value?[e.placeholderClass]:void 0,src:g.value})}}),Pe=["href"],Ne={class:"info"},Te=A({__name:"Project",props:{title:{},color:{},whiteText:{type:Boolean},projectUrl:{},imageUrl:{}},setup(e){return(t,r)=>{const i=Me;return w(),_("a",{href:t.projectUrl,target:"_blank",class:R(["project",{[t.color]:!0,white:t.whiteText,clicky:t.projectUrl!==void 0}])},[H(i,{src:t.imageUrl,alt:t.title},null,8,["src","alt"]),x("div",Ne,[x("h1",null,z(t.title),1),x("p",null,[ne(t.$slots,"default",{},void 0,!0)])])],10,Pe)}}}),Be=se(Te,[["__scopeId","data-v-ed2fc3fd"]]),Ee={key:0},Oe=A({__name:"projects",setup(e){const t=[{name:"Allchemy",color:"from-yellow-400",whiteText:!1,projectUrl:"https://allchemy.io",imageUrl:"/img/allchemy.png",description:`
      A fun web game where players combine items together to make new items.
      All items and item combinations are generated using GPT-3.5, making the game virtually
      infinite.
    `},{name:"ATLAS",color:"from-black",whiteText:!0,imageUrl:"/img/atlas.png",description:[`
        An interactive simulation of a programmable computer, with the ability to
        zoom in and look at individual transistors as the computer runs a program.
        Started out as a hobby project, but eventually became my 3rd year project at
        university.
      `,"Working on a more polished version of ATLAS suitable for release."]},{name:"Atlang",color:"from-[#1f1f1f]",whiteText:!0,projectUrl:"https://github.com/PitsPower/atlc",imageUrl:"/img/atlang.png",description:`
      A statically typed programming language, with a compiler built in Rust, designed to run on a
      similar architecture to the one showcased in ATLAS. My 4th year university project.
    `},{name:"Bonk Leagues",color:"from-[#013e79]",whiteText:!0,projectUrl:"https://bonkleagues.io",imageUrl:"/img/bonkleagues.png",description:`
      A collection of tools for a webgame called bonk.io, including an editor for
      in-game avatars, and a Chrome extension for the game.
    `}];return(r,i)=>{const o=Be;return w(),_("div",null,[(w(),_(P,null,N(t,n=>H(o,{class:"mb-10",title:n.name,color:n.color,"white-text":n.whiteText,"project-url":n.projectUrl,"image-url":n.imageUrl},{default:ae(()=>[typeof n.description=="string"?(w(),_("div",Ee,z(n.description),1)):(w(!0),_(P,{key:1},N(n.description,(s,l)=>(w(),_("div",{class:R({"mt-3":l>0})},z(s),3))),256))]),_:2},1032,["title","color","white-text","project-url","image-url"])),64))])}}});export{Oe as default};
